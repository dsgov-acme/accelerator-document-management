timeout: 1800s
logsBucket: "gs://${_ARTIFACT_BUCKET_NAME}/cloudbuild-logs/app-${_SERVICE_NAME}-push-request-trigger"
options:
  machineType: 'E2_HIGHCPU_8'
availableSecrets:
  secretManager:
  - versionName: "projects/$PROJECT_ID/secrets/${_SLACK_WEBHOOK_URL_SECRET_NAME}/versions/latest"
    env: 'SLACK_WEBHOOK_URL'
steps:
  - id: 'build'
    name: "${_GAR_BUILDER_URL}/helm:4.0.0"
    entrypoint: bash
    args:
      - "-c"
      - |
        skaffold build -p dev --interactive=false --file-output=/workspace/artifacts.json

  - id: "Cloud Deploy Release"
    name: "google/cloud-sdk"
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud deploy releases create "$(echo ${REPO_NAME} | cut -d- -f2-)-${SHORT_SHA}" \
          --project=$PROJECT_ID \
          --region=${_DEPLOY_REGION} \
          --delivery-pipeline=${REPO_NAME} \
          --gcs-source-staging-dir=gs://${_CLOUD_DEPLOY_SOURCE_BUCKET}/source \
          --build-artifacts=/workspace/artifacts.json

  - id: 'Acceptance Tests: Run'
    secretEnv: ['SLACK_WEBHOOK_URL']
    name: "${_GAR_BUILDER_URL}/cloudbuild-jdk17"
    entrypoint: bash
    args:
      - '-c'
      - |
        DEPLOY_RELEASE_NAME="$(echo ${REPO_NAME} | cut -d- -f2-)-${SHORT_SHA}"
        BUILD_ID="$(gcloud builds list --ongoing --limit 1 --filter 'substitutions.TRIGGER_NAME=${TRIGGER_NAME} AND substitutions.SHORT_SHA=${SHORT_SHA}' --format 'value(id)' --region ${_DEPLOY_REGION} --project ${PROJECT_ID})"
        BUILD_URL="https://console.cloud.google.com/cloud-build/builds;region=${_DEPLOY_REGION}/$${BUILD_ID}?project=${PROJECT_ID}"
        DEPLOY_URL="https://console.cloud.google.com/deploy/delivery-pipelines/${_DEPLOY_REGION}/${REPO_NAME}/releases/$${DEPLOY_RELEASE_NAME}/rollouts?project=${PROJECT_ID}"
        BASTION_HOST="$(gcloud compute instances list --filter 'name~bastion' --format 'value(name)' --project ${PROJECT_ID})"
        BASTION_ZONE="$(gcloud compute instances list --filter 'name~bastion' --format 'value(zone)' --project ${PROJECT_ID})"
        DELIVERY_PIPELINE_NAME="${REPO_NAME}"
        ELAPSED=0
        TIMEOUT=10
        # Notify
        trap notify EXIT
        notify() {
          local exit_code=$?
          local message_1=$(printf "Acceptance tests failed: Waiting for Cloud Deploy release \`$${DEPLOY_RELEASE_NAME}\` to succeed timed out.\nBuild URL: $${BUILD_URL}\nDeploy URL: $${DEPLOY_URL}")
          local message_2=$(printf "Acceptance tests failed: Waiting for \`${REPO_NAME}\` K8s deployment to be up and running timed out.\nBuild URL: $${BUILD_URL}\nDeploy URL: $${DEPLOY_URL}")
          if [[ $$exit_code -eq 1 ]]
          then
              python3 ./.ci/notify.py "$${message_1}"
          elif [[ ${exit_code} -eq 2 ]]
          then
              python3 ./.ci/notify.py "$${message_2}"
          fi
        }
        printf "\n***************************************************\n"
        printf "** Step 1: Ascertain Cloud Deploy rollout status **\n"
        printf "***************************************************\n"
        RELEASE_STATUS=""
        until [[ $$RELEASE_STATUS == "SUCCEEDED" ]]
        do
          sleep 30
          if (( ELAPSED > TIMEOUT ))
          then
            echo "Waiting for Cloud Deploy release \"$${DEPLOY_RELEASE_NAME}\" to succeeed timed out. Exiting..."
            exit 1
          fi
          ((ELAPSED++))
          RELEASE_STATUS="$(gcloud deploy rollouts list --release=$${DEPLOY_RELEASE_NAME} --delivery-pipeline=$${DELIVERY_PIPELINE_NAME} --region=${_DEPLOY_REGION} --project=${PROJECT_ID} --format='value(state)')"
        done
        printf "\n************************************************\n"
        printf "** Step 2: Check Kubernetes deployment status **\n"
        printf "************************************************\n"
        export NAMESPACE="$(echo ${REPO_NAME} | cut -d- -f1)"
        # Get kubeconfig file
        gcloud compute ssh buildbot@$$BASTION_HOST --project=$PROJECT_ID --zone=$$BASTION_ZONE --quiet --command="gcloud container clusters get-credentials ${_DEV_CLUSTER_NAME} --region ${_DEPLOY_REGION} --project ${_DEV_PROJECT_ID} --internal-ip"
        # Ascertain newly deployed pod is running
        POD_NAME=$(gcloud compute ssh buildbot@$$BASTION_HOST --project=$PROJECT_ID --zone=$$BASTION_ZONE --quiet --command="kubectl get pod --namespace $${NAMESPACE} -l deploy.cloud.google.com/release-id=$$DEPLOY_RELEASE_NAME --no-headers | grep ${REPO_NAME}" | awk '{print $1}')
        POD_STATUS=""
        CONTAINERS_READY=""
        CONTAINERS=""
        NO_OF_CONTAINERS=""
        until [[ $$POD_STATUS == "Running" && $$CONTAINERS_READY == "$${NO_OF_CONTAINERS}/$${NO_OF_CONTAINERS}" ]]
        do
          sleep 30
          if (( ELAPSED > TIMEOUT ))
          then
            echo "Waiting for pod \"$${POD_NAME}\" to be up and running timed out. Exiting..."
            exit 2
          fi
          ((ELAPSED++))
          POD_STATUS=$(gcloud compute ssh buildbot@$$BASTION_HOST --project=$PROJECT_ID --zone=$$BASTION_ZONE --quiet --command="kubectl get pod --namespace $${NAMESPACE} -l deploy.cloud.google.com/release-id=$${DEPLOY_RELEASE_NAME} --no-headers | grep ${REPO_NAME}" | awk '{print $3}')
          CONTAINERS_READY=$(gcloud compute ssh buildbot@$$BASTION_HOST --project=$PROJECT_ID --zone=$$BASTION_ZONE --quiet --command="kubectl get pod --namespace $${NAMESPACE} -l deploy.cloud.google.com/release-id=$${DEPLOY_RELEASE_NAME} --no-headers | grep ${REPO_NAME}" | awk '{print $2}')
          CONTAINERS=$(gcloud compute ssh buildbot@$$BASTION_HOST --project=$PROJECT_ID --zone=$$BASTION_ZONE --quiet --command="kubectl get pods $${POD_NAME} --namespace $${NAMESPACE} -o jsonpath='{.spec.containers[*].name}'")
          NO_OF_CONTAINERS="$(echo $${CONTAINERS} | tr ' ' '\n' | wc -l)"
        done
        printf "\n**********************************\n"
        printf "** Step 3: Run Acceptance Tests **\n"
        printf "**********************************\n"
        export SERVICE_URI="https://${_DEV_SERVICE_URI}/dm"
        ./gradlew functionalTest || echo "Acceptance tests failed..." > /workspace/error.txt

  - id: 'Acceptance Tests: Notify and Report Failures'
    secretEnv: ['SLACK_WEBHOOK_URL']
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: bash
    args:
      - '-c'
      - |
        BUILD_ID="$(gcloud builds list --ongoing --limit 1 --filter 'substitutions.TRIGGER_NAME=${TRIGGER_NAME} AND substitutions.SHORT_SHA=${SHORT_SHA}' --format 'value(id)' --region ${_DEPLOY_REGION} --project ${PROJECT_ID})"
        REPORT_URL="https://console.cloud.google.com/storage/browser/${_ARTIFACT_BUCKET_NAME}/${REPO_NAME}/failures/acceptance-tests/${SHORT_SHA}?pageState="
        BUILD_URL="https://console.cloud.google.com/cloud-build/builds;region=${_DEPLOY_REGION}/$${BUILD_ID}?project=${PROJECT_ID}"
        # Notify
        trap notify EXIT
        notify() {
          local exit_code=$?
          local message=$(printf "Acceptance tests failed for \`${REPO_NAME}\`.\nBuild URL: $${BUILD_URL}\nReport URL: $${REPORT_URL}")
          if [[ $$exit_code -eq 1 ]]
          then
            python3 ./.ci/notify.py "$${message}"
          fi
        }
        # Report failure
        if [[ -f /workspace/error.txt ]]
        then
          echo "Uploading acceptance tests failure reports to GCS..."
          gsutil -m cp -r /workspace/acceptance-tests/build/reports/* gs://${_ARTIFACT_BUCKET_NAME}/${REPO_NAME}/failures/acceptance-tests/${SHORT_SHA}
          exit 1
        else
          echo "No build failure; continuing..."
        fi
